const textDict = {
    "Assign placeholder values": "For all of the missing data we have in our variables, we need to assume a value to start with. In most cases, it is best to assume a random value from within the dataset for that particular variable, as this will avoid introducing bias into the dataset.",
    "Remove missing data for one variable": "We now want to isolate a particular variable's missing data, so we can remove the assumed / predicted values from this variable only.",
    "Predict values based on other variables": "For our missing data, use the values in the other variables to predict what our missing data should be. This is typically done through either a regression or nearest neighbor process.",
    "Replace values in variable": "Put the results of the prediction into our variable, so that we can continue the process with the new data.",
    "Integrate predicted values into dataset": "After we have completed all of our cycles, we must gather all the predicted values, verify that they are the most accurate set we have, and then place them into the final dataset.",
    "Repeat multiple cycles": "Because we have missing data in multiple variables, it is very unlikely that we would have accurate predictions in the first pass through of the data. Thus, we need to run these predictive iterations multiple times so we can improve the model on each pass. The number of iterations will vary based on the data and many other factors, but a good place to start is 10 iterations."
};

function setText (header) {
    const description = textDict[header];
    d3.select('.mi-descriptionsText')
        .select('.mi-descriptionHeader')
        .text(`${header}: `) ;
    d3.select('.mi-descriptionsText')
        .select('.mi-descriptionBody')
        .text(description) ;
}

function initializeArrowDef (svg) {
    const markerBoxWidth = 10;
    const markerBoxHeight = 10;
    const refX = markerBoxWidth;
    const refY = markerBoxHeight / 2;
    const arrowPoints = [[0, 0], [0, 10], [10, 5]];

    svg.append('defs')
        .append('marker')
        .attr('id', 'arrow')
        .attr('viewBox', [0, 0, markerBoxWidth, markerBoxHeight])
        .attr('refX', refX)
        .attr('refY', refY)
        .attr('markerWidth', markerBoxWidth)
        .attr('markerHeight', markerBoxHeight)
        .attr('orient', 'auto-start-reverse')
        .append('path')
        .attr('d', d3.line()(arrowPoints))
        .attr('stroke', 'rgb(16, 22, 47)')
        .attr('fill', 'rgb(16, 22, 47)');
}

function createPath (origin, originPart, target, targetPart) {
    // offset from upper left corner to the part where arrow should actually be
    const getCoordinates = (boundingRect, location) => {
        const originX = boundingRect.left;
        const originY = boundingRect.top;
        const width = boundingRect.width;
        const height = boundingRect.height;
        if (location === 'right') {
            return [originX + width, originY + (height / 2)];
        }
        if (location === 'left') {
            return [originX, originY + (height / 2)];
        }
        if (location === 'top') {
            return [originX + (width / 2), originY];
        }
    }
    const coordinatesOrigin = getCoordinates(origin.node().getBoundingClientRect(), originPart);
    const coordinatesTarget = getCoordinates(target.node().getBoundingClientRect(), targetPart);
    // if on the same y axis
    if (coordinatesOrigin[1] === coordinatesTarget[1]) {
        return [coordinatesOrigin, coordinatesTarget];
    }
    // if going from lower to higher
    if (coordinatesOrigin[1] > coordinatesTarget[1]) {
        return [coordinatesOrigin, [coordinatesOrigin[0], coordinatesTarget[1]], coordinatesTarget];
    }
    // if going from higher to lower
    return [coordinatesOrigin, [coordinatesTarget[0], coordinatesOrigin[1]], coordinatesTarget];
}

function getPaths () {
    return [
        createPath(d3.select('.mi-block1'), 'right', d3.select('.mi-block2'), 'left'),
        createPath(d3.select('.mi-block2'), 'right', d3.select('.mi-block3'), 'left'),
        createPath(d3.select('.mi-block3'), 'top', d3.select('.mi-block4'), 'right'),
        createPath(d3.select('.mi-block4'), 'left', d3.select('.mi-block2'), 'top'),
        createPath(d3.select('.mi-block3'), 'right', d3.select('.mi-block5'), 'left')
    ];
}

function render () {
    const svg = d3.select('#arrowsSvg');
    if (svg.selectAll('defs').empty()) {
        initializeArrowDef(svg);
    }

    svg.attr('height', () => {
        const blockContainer = d3.select('.mi-blockContainer').node();
        return `${Math.round(blockContainer.getBoundingClientRect().height)}`;
    });

    const arrowPaths = svg.selectAll('.mi-arrowPath')
        .data(getPaths());
    arrowPaths.enter()
        .append('path')
        .attr('class', 'mi-arrowPath')
        .merge(arrowPaths)
        .attr('d', pathCoords => d3.line()(pathCoords))
        .attr('stroke', 'grey')
        .attr('marker-end', 'url(#arrow)')
        .attr('fill', 'none');
    arrowPaths.exit().remove();
}

d3.selectAll('.mi-block')
    .on('click', function (d, i) {
        d3.selectAll('.mi-block')
            .classed('mi-selectedBlock', (d, currI) => i === currI ? true : false);
        const text = d3.select(this).select('h3').text().trim();
        setText(text);
        render();
    });

setText(Object.keys(textDict)[0]);
render();
d3.select(window).on('resize', () => {
    render();
})
